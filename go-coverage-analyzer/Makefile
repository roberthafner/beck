.PHONY: build test clean install deps lint fmt vet run-example help

# Variables
BINARY_NAME=gcov
BUILD_DIR=bin
MAIN_PATH=./cmd/gcov
VERSION=$(shell git describe --tags --always --dirty 2>/dev/null || echo "dev")
LDFLAGS=-ldflags "-X main.version=$(VERSION)"

# Build targets
build: deps
	@echo "üî® Building $(BINARY_NAME)..."
	@mkdir -p $(BUILD_DIR)
	@go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME) $(MAIN_PATH)
	@echo "‚úÖ Binary built: $(BUILD_DIR)/$(BINARY_NAME)"

build-release: deps
	@echo "üöÄ Building release version..."
	@mkdir -p $(BUILD_DIR)
	@CGO_ENABLED=0 go build $(LDFLAGS) -a -installsuffix cgo -o $(BUILD_DIR)/$(BINARY_NAME) $(MAIN_PATH)
	@echo "‚úÖ Release binary built: $(BUILD_DIR)/$(BINARY_NAME)"

# Dependencies
deps:
	@echo "üì¶ Installing dependencies..."
	@go mod download
	@go mod tidy

# Testing
test:
	@echo "üß™ Running tests..."
	@go test -v ./...

test-coverage:
	@echo "üìä Running tests with coverage..."
	@go test -v -race -coverprofile=coverage.out ./...
	@go tool cover -html=coverage.out -o coverage.html
	@echo "üìã Coverage report generated: coverage.html"

test-integration:
	@echo "üîß Running integration tests..."
	@go test -v -tags=integration ./...

# Code quality
lint:
	@echo "üîç Running linter..."
	@which golangci-lint > /dev/null || (echo "Installing golangci-lint..." && go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest)
	@golangci-lint run

fmt:
	@echo "üé® Formatting code..."
	@go fmt ./...
	@goimports -w . 2>/dev/null || echo "goimports not available, run: go install golang.org/x/tools/cmd/goimports@latest"

vet:
	@echo "üîé Vetting code..."
	@go vet ./...

# Installation
install: build
	@echo "üì• Installing $(BINARY_NAME)..."
	@cp $(BUILD_DIR)/$(BINARY_NAME) /usr/local/bin/
	@echo "‚úÖ $(BINARY_NAME) installed to /usr/local/bin/"

uninstall:
	@echo "üóëÔ∏è  Uninstalling $(BINARY_NAME)..."
	@rm -f /usr/local/bin/$(BINARY_NAME)
	@echo "‚úÖ $(BINARY_NAME) uninstalled"

# Examples and testing
run-example: build
	@echo "üöÄ Running example analysis..."
	@./$(BUILD_DIR)/$(BINARY_NAME) analyze ./examples/simple-project --verbose

run-generate-example: build
	@echo "üõ†Ô∏è  Running example test generation..."
	@./$(BUILD_DIR)/$(BINARY_NAME) generate ./examples/simple-project --dry-run --verbose

demo: build
	@echo "üé¨ Running full demo..."
	@./$(BUILD_DIR)/$(BINARY_NAME) analyze ./examples/simple-project --verbose --output console
	@echo ""
	@./$(BUILD_DIR)/$(BINARY_NAME) generate ./examples/simple-project --dry-run --verbose

# Development workflow
dev: fmt vet test

ci: deps fmt vet lint test

pre-commit: fmt vet lint test

# Documentation
docs:
	@echo "üìö Generating documentation..."
	@go doc -all ./... > docs/API.md
	@echo "‚úÖ Documentation generated in docs/API.md"

# Benchmarking
bench:
	@echo "‚ö° Running benchmarks..."
	@go test -bench=. -benchmem ./...

# Profiling
profile-cpu:
	@echo "üî• Running CPU profiling..."
	@go test -cpuprofile=cpu.prof -bench=. ./...
	@go tool pprof cpu.prof

profile-mem:
	@echo "üíæ Running memory profiling..."
	@go test -memprofile=mem.prof -bench=. ./...
	@go tool pprof mem.prof

# Clean up
clean:
	@echo "üßπ Cleaning up..."
	@rm -rf $(BUILD_DIR)
	@rm -f coverage.out coverage.html
	@rm -f cpu.prof mem.prof
	@rm -f *.test
	@echo "‚úÖ Cleanup complete"

clean-examples:
	@echo "üßπ Cleaning example projects..."
	@find examples -name "*.test" -delete
	@find examples -name "coverage.out" -delete
	@find examples -name "*_test.go" -path "*/generated/*" -delete

# Docker support
docker-build:
	@echo "üê≥ Building Docker image..."
	@docker build -t $(BINARY_NAME):$(VERSION) .

docker-run: docker-build
	@echo "üê≥ Running in Docker..."
	@docker run --rm -v $(PWD):/workspace $(BINARY_NAME):$(VERSION)

# Release management
tag:
	@echo "üè∑Ô∏è  Creating git tag..."
	@read -p "Enter tag version (e.g., v1.0.0): " version; \
	git tag -a $$version -m "Release $$version"; \
	git push origin $$version

release: clean build-release test
	@echo "üéâ Release ready: $(BUILD_DIR)/$(BINARY_NAME)"

# Utility targets
version:
	@echo "üìå Version: $(VERSION)"

info:
	@echo "üìã Project Information:"
	@echo "   Name: $(BINARY_NAME)"
	@echo "   Version: $(VERSION)"
	@echo "   Go Version: $(shell go version)"
	@echo "   Build Dir: $(BUILD_DIR)"
	@echo "   Main Path: $(MAIN_PATH)"

check-tools:
	@echo "üîß Checking required tools..."
	@which go >/dev/null || (echo "‚ùå Go not found" && exit 1)
	@which git >/dev/null || echo "‚ö†Ô∏è  Git not found (optional)"
	@which golangci-lint >/dev/null || echo "‚ö†Ô∏è  golangci-lint not found (run: make lint to install)"
	@which goimports >/dev/null || echo "‚ö†Ô∏è  goimports not found (run: go install golang.org/x/tools/cmd/goimports@latest)"
	@echo "‚úÖ Tool check complete"

# Help
help:
	@echo "üöÄ Go Coverage Analyzer & Test Generator"
	@echo "========================================"
	@echo ""
	@echo "Build Commands:"
	@echo "  build           Build the binary"
	@echo "  build-release   Build optimized release binary"
	@echo "  install         Install binary to /usr/local/bin"
	@echo "  uninstall       Remove binary from /usr/local/bin"
	@echo ""
	@echo "Development Commands:"
	@echo "  deps            Install dependencies"
	@echo "  test            Run all tests"
	@echo "  test-coverage   Run tests with coverage report"
	@echo "  lint            Run linter"
	@echo "  fmt             Format code"
	@echo "  vet             Vet code"
	@echo "  dev             Run fmt, vet, and test"
	@echo "  ci              Full CI workflow"
	@echo ""
	@echo "Example Commands:"
	@echo "  run-example     Analyze example project"
	@echo "  run-generate-example  Generate tests for example (dry-run)"
	@echo "  demo            Run full demo"
	@echo ""
	@echo "Utility Commands:"
	@echo "  clean           Clean build artifacts"
	@echo "  version         Show version"
	@echo "  info            Show project information"
	@echo "  check-tools     Check required tools"
	@echo "  help            Show this help"